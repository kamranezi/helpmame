import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!botToken || !chatId) {
    return NextResponse.json(
      { message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞ –¥–ª—è Telegram.' },
      { status: 500 }
    );
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –∏ —Ç–∏–ø –∑–∞—è–≤–∫–∏
    const { phone, type } = await req.json();

    if (!phone) {
      return NextResponse.json({ message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.' }, { status: 400 });
    }

    let text: string;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (type === 'urgent') {
      text = `üö® *–°–†–û–ß–ù–ê–Ø –ó–ê–Ø–í–ö–ê!* üö®\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å!\n\n*–¢–µ–ª–µ—Ñ–æ–Ω:* \`${phone}\``;
    } else {
      text = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n–¢–µ–ª–µ—Ñ–æ–Ω: \`${phone}\``;
    }

    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
      }),
    });

    const result = await response.json();

    if (!result.ok) {
      console.error('Telegram API Error:', result);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.');
    }

    return NextResponse.json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' });

  } catch (error) {
    console.error('Internal Server Error:', error);
    return NextResponse.json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' }, { status: 500 });
  }
}
