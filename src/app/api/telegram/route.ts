\nimport { NextRequest, NextResponse } from \'next/server\';\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å\nconst formatDateTime = (dateTime: string | undefined) => {\n  if (!dateTime) return \'–ù–µ —É–∫–∞–∑–∞–Ω–æ\';\n  try {\n    return new Date(dateTime).toLocaleString(\'ru-RU\', {\n      year: \'numeric\',\n      month: \'long\',\n      day: \'numeric\',\n      hour: \'2-digit\',\n      minute: \'2-digit\',\n    });\n  } catch (e) {\n    return dateTime; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  const botToken = process.env.TELEGRAM_BOT_TOKEN;\n  const chatIdsEnv = process.env.TELEGRAM_CHAT_IDS; \n\n  if (!botToken || !chatIdsEnv) {\n    console.error(\'Server config error: Telegram environment variables not found.\');\n    return NextResponse.json(\n      { message: \'–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram.\' },\n      { status: 500 }\n    );\n  }\n\n  const chatIds = chatIdsEnv.split(\',\').map(id => id.trim());\n\n  try {\n    const { \n      name, phone, description, type, \n      consultationType, address, dateTime, asap \n    } = await req.json();\n\n    if (!name || !phone) {\n      return NextResponse.json({ message: \'–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.\' }, { status: 400 });\n    }\n\n    let text: string;\n    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2, –æ–Ω –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π, –Ω–æ –∏ –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π. \n    // –ù—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–≤–æ–¥–µ.\n    const escapeMarkdown = (str: string) => str ? str.replace(/([_*[\\]()~`>#+\\-=|{}.!])/g, \'\\\\$1\') : \'\';\n\n    const safeName = escapeMarkdown(name);\n    const safePhone = escapeMarkdown(phone);\n    const safeAddress = escapeMarkdown(address);\n    const safeDescription = escapeMarkdown(description);\n\n    let baseInfo = `*–ò–º—è:* ${safeName}\\n*–¢–µ–ª–µ—Ñ–æ–Ω:* \`${safePhone}\`\\n`;\n\n    switch (type) {\n      case \'urgent\':\n        text = `üö® *–°–†–û–ß–ù–ê–Ø –ó–ê–Ø–í–ö–ê!* üö®\\n\\n${baseInfo}`;\n        if (description) text += `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${safeDescription}`;\n        break;\n\n      case \'specialist-call\': {\n        let title = \'üìû *–í–´–ó–û–í –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê –ù–ê –î–û–ú* üìû\';\n        let timeInfo = asap ? \'*–í—Ä–µ–º—è:* –ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ\' : `*–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:* ${formatDateTime(dateTime)}`;\n        \n        text = `${title}\\n\\n${baseInfo}`;\n        if (address) text += `*–ê–¥—Ä–µ—Å:* ${safeAddress}\\n`;\n        text += `${timeInfo}\\n`;\n        if (description) text += `*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:* ${safeDescription}`;\n        break;\n      }\n\n      case \'consultation\':\n      default: {\n        let title = \'üìÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è*\';\n        let timeInfo = asap ? \'*–í—Ä–µ–º—è:* –ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ\' : `*–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:* ${formatDateTime(dateTime)}`;\n\n        text = `${title}\\n\\n${baseInfo}`;\n        text += `${timeInfo}\\n`;\n        if (description) {\n          text += `*–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:* ${safeDescription}`;\n        }\n        break;\n      }\n    }\n\n    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;\n\n    const sendPromises = chatIds.map(chatId => \n      fetch(telegramUrl, {\n        method: \'POST\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify({ chat_id: chatId, text: text, parse_mode: \'MarkdownV2\' }),\n      })\n    );\n\n    const responses = await Promise.all(sendPromises);\n    const failedResponses = [];\n\n    for (const response of responses) {\n      if (!response.ok) {\n        const errorBody = await response.json().catch(() => ({ description: \'Could not parse error body\' }));\n        console.error(\'Telegram API request failed:\', { status: response.status, body: errorBody });\n        failedResponses.push(errorBody);\n      }\n    }\n\n    if (failedResponses.length > 0) {\n        const errorDescription = failedResponses[0]?.description || \'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram.\';\n        return NextResponse.json(\n            { message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: ${errorDescription}` },\n            { status: 502 } // 502 Bad Gateway, —Ç.–∫. –º—ã –≤—ã—Å—Ç—É–ø–∞–µ–º –≤ —Ä–æ–ª–∏ —à–ª—é–∑–∞ –∫ Telegram\n        );\n    }\n\n    return NextResponse.json({ message: \'–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\' });\n\n  } catch (error) {\n    console.error(\'Internal Server Error in POST /api/telegram:\', error);\n    return NextResponse.json({ message: \'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\' }, { status: 500 });\n  }\n}\n