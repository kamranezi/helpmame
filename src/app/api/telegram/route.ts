import { NextRequest, NextResponse } from 'next/server';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
const formatDateTime = (dateTime: string | undefined) => {
  if (!dateTime) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  try {
    return new Date(dateTime).toLocaleString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch (e) {
    return dateTime; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
  }
}

export async function POST(req: NextRequest) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatIdsEnv = process.env.TELEGRAM_CHAT_IDS; 

  if (!botToken || !chatIdsEnv) {
    return NextResponse.json(
      { message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram.' },
      { status: 500 }
    );
  }

  const chatIds = chatIdsEnv.split(',').map(id => id.trim());

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { 
      name, 
      phone, 
      description, 
      type, 
      consultationType, 
      address, 
      dateTime, 
      asap 
    } = await req.json();

    if (!name || !phone) {
      return NextResponse.json({ message: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' }, { status: 400 });
    }

    let text: string;

    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
    let baseInfo = `*–ò–º—è:* ${name}\\n*–¢–µ–ª–µ—Ñ–æ–Ω:* \`${phone}\`\\n`;

    // –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    switch (type) {
      case 'urgent':
        text = `üö® *–°–†–û–ß–ù–ê–Ø –ó–ê–Ø–í–ö–ê!* üö®\\n\\n${baseInfo}`;
        if (description) text += `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${description}`;
        break;

      case 'specialist-call': {
        let title = 'üìû *–í–´–ó–û–í –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê –ù–ê –î–û–ú* üìû';
        let timeInfo = asap ? '*–í—Ä–µ–º—è:* –ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ' : `*–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:* ${formatDateTime(dateTime)}`;
        
        text = `${title}\\n\\n${baseInfo}`;
        if (address) text += `*–ê–¥—Ä–µ—Å:* ${address}\\n`;
        text += `${timeInfo}\\n`;
        if (description) text += `*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:* ${description}`;
        break;
      }

      case 'consultation':
      default: {
        const isHomeVisit = consultationType === 'home_visit';
        let title = isHomeVisit 
          ? 'üìÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –í—ã–∑–æ–≤ –Ω–∞ –¥–æ–º*' 
          : 'üìÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è*';
        
        let timeInfo = asap ? '*–í—Ä–µ–º—è:* –ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ' : `*–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:* ${formatDateTime(dateTime)}`;

        text = `${title}\\n\\n${baseInfo}`;
        if (isHomeVisit && address) {
          text += `*–ê–¥—Ä–µ—Å:* ${address}\\n`;
        }
        text += `${timeInfo}\\n`;
        if (description) {
          text += `*–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:* ${description}`;
        }
        break;
      }
    }

    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const sendPromises = chatIds.map(chatId => 
      fetch(telegramUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: chatId, text: text, parse_mode: 'Markdown' }),
      })
    );

    await Promise.all(sendPromises);

    return NextResponse.json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' });

  } catch (error) {
    console.error('Internal Server Error:', error);
    return NextResponse.json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' }, { status: 500 });
  }
}
