
import { NextRequest, NextResponse } from 'next/server';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
const formatMessage = (title: string, data: { name: string; phone: string; description?: string }) => {
  let message = `${title}\n\n`;
  message += `*–ò–º—è:* ${data.name}\n`;
  message += `*–¢–µ–ª–µ—Ñ–æ–Ω:* \`${data.phone}\`\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  if (data.description) {
    message += `*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:* ${data.description}`;
  }

  return message;
};

export async function POST(req: NextRequest) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  // –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const chatIdsEnv = process.env.TELEGRAM_CHAT_IDS; 

  if (!botToken || !chatIdsEnv) {
    return NextResponse.json(
      { message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram.' },
      { status: 500 }
    );
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –Ω–∞ –º–∞—Å—Å–∏–≤
  const chatIds = chatIdsEnv.split(',').map(id => id.trim());

  try {
    const { name, phone, description, type } = await req.json();

    if (!name || !phone) {
      return NextResponse.json({ message: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' }, { status: 400 });
    }

    let text: string;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
    switch (type) {
      case 'urgent':
        text = formatMessage('üö® *–°–†–û–ß–ù–ê–Ø –ó–ê–Ø–í–ö–ê!* üö®', { name, phone, description });
        break;
      case 'specialist-call':
        text = formatMessage('üìû *–í–´–ó–û–í –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê* üìû', { name, phone, description });
        break;
      case 'consultation':
      default:
        text = formatMessage('üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', { name, phone, description });
        break;
    }

    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
    const sendPromises = chatIds.map(chatId => 
      fetch(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId, 
          text: text,
          parse_mode: 'Markdown',
        }),
      })
    );

    // –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const responses = await Promise.all(sendPromises);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç
    for (const response of responses) {
      const result = await response.json();
      if (!result.ok) {
        console.error('Telegram API Error:', result);
        // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—É–¥–∞—á–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω –∏–∑ —á–∞—Ç–æ–≤ Telegram.');
      }
    }

    return NextResponse.json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã!' });

  } catch (error) {
    console.error('Internal Server Error:', error);
    return NextResponse.json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' }, { status: 500 });
  }
}
